name: Docker Build/Publish Image 
on:  
  push:    
    branches: [ main, master, arm ]  
jobs:   
  build:    
    runs-on: ubuntu-latest
    env:      
      DOCKER_REGISTRY: registry.hub.docker.com
      DOCKER_IMAGE: ankitmehtame/lsyncd
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
      DOCKER_TARGET_PLATFORM: linux/arm/v7                 
    steps:
      - name: Checkout the code       
        uses: actions/checkout@v2

      - name: Set up Docker Buildx      
        uses: crazy-max/ghaction-docker-buildx@v3
        with:        
          buildx-version: latest
          qemu-version: latest

      - name: Login to DockerHub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run Buildx
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm/v7,linux/arm64 \
            --tag ${DOCKER_IMAGE}:latest \
            --output "type=image,push=true" \
            --file ./Dockerfile .

      # - name: Prepare      
      #   if: success()
      #   id: prepare      
      #   run: |        
      #     echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}        
      #     echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}        
      #     echo ::set-output name=version::${GITHUB_RUN_NUMBER}    
      # - name: Docker Login      
      #   if: success()      
      #   run: |        
      #     echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin          
      # - name: Run Buildx (push image)      
      #   if: success()      
      #   run: |        
      #     docker buildx build \        --platform ${{ steps.prepare.outputs.docker_platform }} \
      #     --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
      #     --file ./Dockerfile \        --output type=image,push=true .